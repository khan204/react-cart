{"version":3,"sources":["Components/count.jsx","Components/childCount.jsx","Components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Chi","className","this","getBadgeClas","formate","onClick","props","OnIncrement","items","onDelete","id","classes","value","Component","Counters","state","arra","handleIncrement","counter","index","indexOf","setState","handleDelete","itemsid","filter","c","handleReset","map","key","NavBar","href","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAqCeA,E,uKAjCD,IAAD,OAEL,OAQI,6BAEI,0BAAMC,UAAWC,KAAKC,gBAAtB,IAAwCD,KAAKE,WAC7C,4BAAQC,QAAS,kBAAI,EAAKC,MAAMC,YAAY,EAAKD,MAAME,QAAQP,UAAU,oCAAzE,aACA,4BAAQI,QAAS,kBAAI,EAAKC,MAAMG,SAAS,EAAKH,MAAME,MAAME,KAAKT,UAAU,gCAAzE,a,qCAOR,IAAIU,EAAU,eAEd,OADAA,GAAsC,IAA3BT,KAAKI,MAAME,MAAMI,MAAc,UAAY,Y,gCAIhD,IACAA,EAAOV,KAAKI,MAAME,MAAlBI,MACN,OAAe,IAARA,EAAY,OAAOA,M,GA/BhBC,aCqDHC,E,4MAnDXC,MAAQ,CACJC,KAAK,CACD,CAACN,GAAG,EAAGE,MAAM,GACb,CAACF,GAAG,EAAIE,MAAM,GACd,CAACF,GAAG,EAAGE,MAAM,GACb,CAACF,GAAG,EAAIE,MAAM,K,EAKtBK,gBAAgB,SAAAC,GACZ,IAAMF,EAAK,YAAI,EAAKD,MAAMC,MACrBG,EAAMH,EAAKI,QAAQF,GACxBF,EAAKG,GAAL,eAAgBD,GAChBF,EAAKG,GAAOP,QACZ,EAAKS,SAAS,CAACL,U,EAMnBM,aAAa,SAAAC,GACT,IAAMP,EAAK,EAAKD,MAAMC,KAAKQ,QAAO,SAAAC,GAAC,OAAEA,EAAEf,KAAKa,KAC5C,EAAKF,SAAS,CAACL,U,EAGnBU,YAAY,WACR,IAAMV,EAAM,EAAKD,MAAMC,KAAKW,KAAI,SAAAF,GAAe,OAAXA,EAAEb,MAAM,EAAUa,KACjD,EAAKJ,SAAS,CAACL,U,uDASd,IAAD,OACL,OAAS,6BACL,4BAAQX,QAASH,KAAKwB,YAAazB,UAAU,kCAA7C,SAEEC,KAAKa,MAAMC,KAAKW,KAAI,SAACnB,GAAD,OAAS,kBAAC,EAAD,CACnCoB,IAAKpB,EAAME,GACXH,YAAa,EAAKU,gBAElBR,SAAU,EAAKa,aACfd,MAAOA,Y,GA/CQK,aCORgB,E,uKANP,OAAQ,yBAAK5B,UAAU,gCACvB,uBAAGA,UAAU,eAAe6B,KAAK,KAAjC,e,GAHajB,a,MCiBNkB,MAZf,WACE,OACE,kBAAC,IAAMC,SAAP,KACA,kBAAC,EAAD,MACA,0BAAM/B,UAAU,aACd,kBAAC,EAAD,S,MCCcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.77e2795b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Chi extends Component {\r\n   \r\n    \r\n    render() {\r\n        //console.log(this.props.children)\r\n        return (\r\n\r\n    \r\n    \r\n    \r\n        \r\n            \r\n            \r\n            <div>\r\n            \r\n                <span className={this.getBadgeClas()}> {this.formate()}</span>\r\n                <button onClick={()=>this.props.OnIncrement(this.props.items)} className=\"button btn-secondary btn-sm m-2 \">Increment</button>\r\n                <button onClick={()=>this.props.onDelete(this.props.items.id)} className=\"button btn-danger btn-sm m-2\">Delete</button>\r\n\r\n            </div>\r\n            )\r\n        }\r\n\r\n    getBadgeClas() {\r\n        let classes = \"badge badge-\";\r\n        classes += this.props.items.value === 0 ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formate(){\r\n        const{value}=this.props.items;\r\n        return value===0 ? 'zero':value;\r\n\r\n    }\r\n}\r\n \r\nexport default Chi;","import React, { Component } from 'react';\r\nimport Chi from './count'\r\nclass Counters extends Component {\r\n    state = { \r\n        arra:[\r\n            {id:1 ,value:4},\r\n            {id:2 , value:0},\r\n            {id:3 ,value:0},\r\n            {id:4 , value:0}\r\n        ]\r\n    }\r\n\r\n\r\n    handleIncrement=counter=>{\r\n        const arra=[...this.state.arra];\r\n       const index=arra.indexOf(counter)\r\n        arra[index]={...counter};\r\n        arra[index].value++;\r\n        this.setState({arra});\r\n      \r\n       // console.log(arra[index]); \r\n    }\r\n\r\n\r\n    handleDelete=itemsid=>{\r\n        const arra=this.state.arra.filter(c=>c.id!==itemsid);\r\n        this.setState({arra});\r\n    }\r\n\r\n    handleReset=()=>{\r\n        const arra= this.state.arra.map(c=>{c.value=0; return c;});\r\n             this.setState({arra});\r\n          \r\n      }\r\n      \r\n\r\n\r\n    \r\n\r\n    \r\n    render() { \r\n        return ( <div>\r\n            <button onClick={this.handleReset} className=\"button btn-primary btn-sm m-2 \">Reset</button>\r\n\r\n            { this.state.arra.map((items)=><Chi \r\n        key={items.id}\r\n        OnIncrement={this.handleIncrement}\r\n\r\n        onDelete={this.handleDelete}\r\n        items={items}\r\n        />)}</div>);\r\n    }\r\n}\r\n \r\nexport default Counters; ","import React, { Component } from 'react';\r\nclass NavBar extends Component {\r\n        render() { \r\n        return (<nav className=\"navbar navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n      </nav>  );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import React from 'react';\n//import logo from './logo.svg';\nimport Counters from './Components/childCount';\nimport NavBar from './Components/navbar'\nimport './App.css';\n\nfunction App() {\n  return (\n    <React.Fragment>\n    <NavBar/>\n    <main className=\"container\">\n      <Counters/>\n      </main>\n</React.Fragment>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n//import Counters from './Components/childCount';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}